# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_psth', [dirname(__file__)])
        except ImportError:
            import _psth
            return _psth
        if fp is not None:
            try:
                _mod = imp.load_module('_psth', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _psth = swig_import_helper()
    del swig_import_helper
else:
    import _psth
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Spike(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Spike, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Spike, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ts"] = _psth.Spike_ts_set
    __swig_getmethods__["ts"] = _psth.Spike_ts_get
    if _newclass:ts = _swig_property(_psth.Spike_ts_get, _psth.Spike_ts_set)
    __swig_setmethods__["chan"] = _psth.Spike_chan_set
    __swig_getmethods__["chan"] = _psth.Spike_chan_get
    if _newclass:chan = _swig_property(_psth.Spike_chan_get, _psth.Spike_chan_set)
    __swig_setmethods__["unit"] = _psth.Spike_unit_set
    __swig_getmethods__["unit"] = _psth.Spike_unit_get
    if _newclass:unit = _swig_property(_psth.Spike_unit_get, _psth.Spike_unit_set)
    def __init__(self): 
        this = _psth.new_Spike()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _psth.delete_Spike
    __del__ = lambda self : None;
Spike_swigregister = _psth.Spike_swigregister
Spike_swigregister(Spike)

class Channel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Channel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Channel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chan"] = _psth.Channel_chan_set
    __swig_getmethods__["chan"] = _psth.Channel_chan_get
    if _newclass:chan = _swig_property(_psth.Channel_chan_get, _psth.Channel_chan_set)
    __swig_setmethods__["unit"] = _psth.Channel_unit_set
    __swig_getmethods__["unit"] = _psth.Channel_unit_get
    if _newclass:unit = _swig_property(_psth.Channel_unit_get, _psth.Channel_unit_set)
    def __init__(self): 
        this = _psth.new_Channel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _psth.delete_Channel
    __del__ = lambda self : None;
Channel_swigregister = _psth.Channel_swigregister
Channel_swigregister(Channel)


def _hash_chan(*args):
  return _psth._hash_chan(*args)
_hash_chan = _psth._hash_chan

def set_channels(*args):
  return _psth.set_channels(*args)
set_channels = _psth.set_channels

def binspikes(*args):
  return _psth.binspikes(*args)
binspikes = _psth.binspikes
# This file is compatible with both classic and new-style classes.


